#!/usr/bin/env zsh


# Utilities
# =========

# Simple chance to quit
# ---------------------
md_pause() {
    echo "  Press 'Enter' to continue (Ctrl-C to quit) ..."
    read
}

# Get metadata field from md file
# -------------------------------
md_metadata() {
    file="$1"
    field="$2"
    include_dir="$MD_DATA/include"
    includes=($(grep '^include: .*$' "$file" | tr ' ' '\n' | grep -v '^include:$'))

    grep '^'"$field"': .*$' "$file" | tr ' ' '\n' | grep -v '^'"$field"':$'
    for include in $includes; do
        if [[ -f "$include" ]]; then
            md_metadata "$include" "$field"
        elif [[ -f "$include_dir/$include" ]]; then
            md_metadata "$include_dir/$include" "$field"
        fi
    done
}

# Get target files
# ----------------
md_targets() {
    src_file="$1"
    dir="$(dirname "$src_file")"
    files="$(md_metadata "$src_file" 'targets')"
    [[ -z "$files" ]] && files=("$src_file")
    echo $files
}

# Generate standard content
# -------------------------
md_generate() {
    src_file="$1"
    file="$2"
    cat "$file"
    echo
    [[ "$file" != "$src_file" ]] && cat "$src_file"
    echo

    for generator in $(md_metadata "$src_file" 'generate'); do
        case "$generator" in
            navigation)
                echo
                echo '<div id="navigation">'
                for page in $(md_targets "$src_file"); do
                    echo "-   [$(md_metadata "$page" 'title')](${page%md}html)"
                done
                echo '</div>'
                echo
                ;;
            logo)
                echo
                echo '<div id="logo"></div>'
                echo
                ;;
            *)
                echo "Unrecognized generator: '$generator'" >&2
                ;;
        esac
    done
}


# Make Functionalities
# ====================

# Build md to document
# --------------------
md_make_doc() {
    src_file="$1"
    dir="$(dirname "$src_file")"

    for file in $(md_targets "$src_file"); do
        for output_format in $(md_metadata "$src_file" 'format'); do
            out_ext="$output_format"
            [[ "$output_format" =~ 'latex|beamer' ]] && out_ext='tex'
            output_file="${file%md}$out_ext"

            pandoc --standalone --filter=pandoc-citeproc \
                    --from=markdown --to="$output_format" \
                    =(md_generate "$src_file" "$file") \
                    --output="$output_file" \
                || return 1

            if [[ "$out_ext" == 'tex' ]]; then
                pdflatex -output-directory "$dir" "$output_file" \
                    && pdflatex -output-directory "$dir" "$output_file"

                rm -f "${file%md}nav" "${file%md}snm" "${file%md}toc" \
                        "${file%md}aux" "${file%md}bbl" "${file%md}blg" \
                        "${file%md}log" "${file%md}out"
            fi
        done
    done
}

# Build executable files from md
# ------------------------------
md_make_exec() {
    file="$1"
    shift
    [[ ! -f "$file" ]] && return 1

    for output_file in $(md_metadata "$file" 'execute'); do
        sed -n '\=```.*{.*exec:'"$output_file"'.*}$=,\=```$=p' "$file" \
            | grep -v '^\s*```' > "$output_file"
        chmod u+x "$output_file"
    done
}


# Publish Functionalities
# =======================

# Printing
# --------
md_publish_print() {
    file="$1"
    [[ ! -f "$file" ]] \
        && echo "File '$file' doesn't exist." >&2 \
        && return 1
    [[ -z "$PRINT_SERVER" ]] \
        && echo "No 'PRINT_SERVER' specified." >&2 \
        && return 1
    [[ -z "$PRINTER" ]] \
        && echo "No 'PRINTER' specified." >&2 \
        && return 1
    echo "'$file' will be printed to '$PRINTER' on '$PRINT_SERVER'."
    md_pause
    echo
    cat "$file" | ssh "$PRINT_SERVER" "lpr -C $file -P $PRINTER"
}

# Git
# ---
md_publish_git() {
    method="${1#git-}"
    shift
    echo "Don't forget to 'git add ...' new files."
    printf "Commit message: "; read message
    git commit -a -m "$message"
    git push
    case "$method" in
        remote-checkout)
            remote="$(git config --get remote.origin.url)"
            server="${${remote#ssh://}%/\~/*}"
            remote_dir="${remote#*\~/}"
            branch="$(git branch | cut --delimiter=' ' --field=2)"
            ssh "$server" "cd $remote_dir; git reset --hard $branch"
            ;;
        git)
            continue
            ;;
        *)
            echo "Unrecognized git publish method: $method" >&2
            ;;
    esac
}


# Top-level Functionalities
# =========================

# Handle making md files
# ----------------------
md_make() {
    make_command="$1"
    shift
    case "$make_command" in
        doc)
            md_make_doc $@
            ;;
        exec)
            md_make_exec $@
            ;;
        *)
            echo "Unrecognized make command: $make_command" >&2
            return 1
            ;;
    esac
}

# View document
# -------------
md_view() {
    src_file="$1"
    shift
    format="$(md_metadata "$src_file" 'format' | cut --delimiter=' ' --field=1)"

    for file in $(md_targets "$src_file"); do
        case "$format" in
            html)
                program="$BROWSER"
                file="${file%md}html"
                ;;
            latex|beamer)
                program="$VIEWER"
                file="${file%md}pdf"
                ;;
            *)
                echo "Unrecognized view format: $format" >&2
                ;;
        esac
        echo "Displaying '$file' with '$program'."
        "$program" "$file" &
    done
    [[ "$#" -gt "0" ]] && md_view $@
    return 0
}

# Publish document
# ----------------
md_publish() {
    file="$1"
    for publish_method in $(md_metadata "$file" 'publish'); do
        case "$publish_method" in
            print)
                md_publish_print "$file" $@
                ;;
            git*)
                md_publish_git $publish_method $@
                ;;
            *)
                echo "Unrecognized publish method: $publish_method" >&2
                return 1
                ;;
        esac
    done
}


# Top-Level Wrapper
# =================

md_command="$1"
shift
case "$md_command" in
    make)
        md_make $@
        ;;
    view)
        md_view $@
        ;;
    publish)
        md_publish $@
        ;;
    print)
        md_publish_print $@
        ;;
    *)
        echo "Unrecognized command: $md_command" >&2
        exit 1
        ;;
esac
