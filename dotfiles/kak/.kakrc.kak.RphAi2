## Hooks

# add line numbers
hook global WinCreate .* %{addhl number_lines}
# highlight characters in 81st column
hook global WinCreate .* %{addhl regex ^\V{80}(\V) 1:Error}

# add brackets highlighting
hook global WinCreate .* %{addhl show_matching}

# scroll offset
set global scrolloff 12,0

# tabs
## 4-space tabs
set global indentwidth 4
set global tabstop 4
## 2-space tabs for Haskell
hook global BufSetOption filetype=haskell %{
    set buffer tabstop 2
    set buffer indentwidth 2
}
## soft tabs (excluding makefiles and Go)
hook global BufSetOption filetype=(?!(makefile)|(go)).*? %{
    hook buffer InsertChar \t %{ exec -draft -itersel h@ }
}

hook global BufCreate .*[.](ts) %{
    set buffer filetype javascript
}

hook global BufSetOption filetype=javascript %{
    map global user h 'i<lt><gt><lt>/<gt><esc>hh/<gt><ret>HHHHs<lt>/?<ret>\'a'
}

hook global InsertKey <backspace> %{ try %{
  exec -draft hGh<a-k>\A\h+\Z<ret>gihyp<lt>
}} 

hook global BufSetOption filety
map global user f '/%opt{function_start}<a-n>?%opt{function_end}<ret>'

# auto wrap at 80 chars
set global autowrap_column 80
hook global WinCreate .* %{ autowrap-enable }

# colors
colorscheme solarized2

# Tmux integration
# ================

def tmux-new %{
    on-key %{ %sh{
        case "$kak_key" in
            \\) echo tmux-new-horizontal
               ;;
            "<minus>") echo tmux-new-vertical
               ;;
        esac
    } }
}
map global user t :tmux-new<ret>
map global user r %{ :send-text <ret> }

# X11 (copy/paste)
# ---------------
map global user y 'y<a-|>xclip -i<ret>; :echo -color Information "copied
 selection to X11 clipboard"<ret>'
map global user p '!xclip -o <ret>'

# commenting
def comment %{
    on-key %{ %sh{
        case "$kak_key" in
            'c') echo comment-line ;;
            'b') echo 'exec <a-i>pH:comment-block<ret>' ;;
        esac
    } }
}
map global user c :comment<ret>

# Haskell
# =======


# Markdown manipulation
# =====================

hook global BufSetOption filetype=markdown %{
    # build document
    map global user w %{ :nop "%sh{ alias_call md beamer ${kak_buffile}  }" <ret> }

    # format text with pandoc
    map global user g %{ | pandoc --from=markdown --to=markdown --columns=80 <ret> }

    # custom commands
    map global user h hXypjXHr=A<ret><esc>
    map global user s hXypjXHr-A<ret><esc>XHd
    #map global user b %{ | pandoc-citeproc --bib2yaml --format=biblatex <ret> }
}

def add-surround %!on-key %@exec %sh&
  case "$kak_key" in
      "<lt>") key="<" ;;
      "<gt>") key=">" ;;
      "<space>") key=" " ;;
      \<*\>) echo ":echo<space>no<ret>"; exit 1 ;;
      *) key="$kak_key" ;;
  esac

  open="$key"
  close="$key"
  case "$key" in
      "("|")") open="("; close=")" ;;
      "["|"]") open="["; close="]" ;;
      "{"|"}") open="{"; close="}" ;;
      "<"|">") open="<"; close=">" ;;
  esac

  epilogue=${close//?/H}

  open=${open/</<lt>}
  close=${close/>/<gt>}

  open=${open/ /<space>}
  close=${close/ /<space>}
  
  echo "i$open<esc>a$close<esc>$epilogue"
&@!

def delete-surround %!on-key %@exec %sh&
  case "$kak_key" in
      "<lt>") key="<" ;;
      "<gt>") key=">" ;;
      "<space>") key=" " ;;
      \<*\>) echo ":echo<space>no<ret>"; exit 1 ;;
      *) key="$kak_key" ;;
  esac

  open="$key"
  close="$key"
  case "$key" in
      "("|")") open="\("; close="\)" ;;
      "["|"]") open="\["; close="\]" ;;
      "{"|"}") open="{"; close="}"   ;;
      "<"|">") open="<"; close=">"   ;;
  esac

  open=${open/</<lt>}
  close=${close/>/<gt>}

  open=${open/ /<space>}
  close=${close/ /<space>}
  
  echo "<a-a>${kak_key}s${open}|${close}<ret>d<space>"
&@!

def surround %{
    on-key %{ %sh{
        case "$kak_key" in
            a) echo add-surround
               ;;
            d) echo delete-surround
               ;;
        esac
    } }
}
map global user e ":surround<ret>"
