## Hooks

# add line numbers
hook global WinCreate .* %{addhl number_lines}
# highlight characters in 81st column
hook global WinCreate .* %{addhl regex ^\V{80}(\V) 1:Error}

# add brackets highlighting
hook global WinCreate .* %{addhl show_matching}

# scroll offset
set global scrolloff 12,0

# tabs
## 4-space tabs
set global tabstop 4
## 2-space tabs for Haskell
hook global BufSetOption filetype=haskell %{
    set buffer tabstop 2
    set buffer indentwidth 2
}
## soft tabs (excluding makefiles)
hook global BufSetOption filetype=(?!makefile).*? %{
    hook buffer InsertChar \t %{ exec -draft h@ }
}

# auto wrap at 80 chars
set global autowrap_column 80
hook global WinCreate .* %{ autowrap-enable }

# colors
colorscheme solarized2

# Tmux integration
# ================

def tmux-new %{
    on-key %{ %sh{
        case "$kak_key" in
            \\) echo tmux-new-horizontal
               ;;
            "<minus>") echo tmux-new-vertical
               ;;
        esac
    } }
}
map global user t :tmux-new<ret>
map global user r %{ :send-text <ret> }

# commenting
# map global user c ':on-key %{ %sh{ case "$kak_key" in; \'c\') echo'
# \':comment-line<ret>\'; ;} }'
#map global user n :comment-line<ret>
#map global user c :comment-selection<ret>

# Haskell
# =======


# Markdown manipulation
# =====================

# build document
map global user w %{ :nop "%sh{ alias_call md beamer ${kak_buffile}  }" <ret> }

# format text with pandoc
map global user g %{ | pandoc --from=markdown --to=markdown --columns=80 <ret> }

# custom commands
map global user h hXypjXHr=A<ret><esc>
map global user s hXypjXHr-A<ret><esc>XHd
#map global user b %{ | pandoc-citeproc --bib2yaml --format=biblatex <ret> }
