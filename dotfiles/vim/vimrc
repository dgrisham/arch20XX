" General
" ======
"" start w/ relative line numbers
set relativenumber

" Local vimrc
" -----------
set exrc
set secure


" Plugins
" =======
"
" vundle
""filetype must be turned off before vundle commands
filetype off
""" set the runtime path to include vundle, and initialize
set rtp+=$DOTFILES/vim/bundle/Vundle.vim
call vundle#begin()

""" vundle modules to load
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"""" general code plugins
Plugin 'mbbill/undotree'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-obsession'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'Shougo/vimproc'
"""" tmux
Plugin 'jgdavey/tslime.vim'
"""" markdown
Plugin 'tpope/vim-markdown'
"""" haskell
Plugin 'eagletmt/ghcmod-vim'
Plugin 'eagletmt/neco-ghc'
"Plugin 'tpope/vim-markdown'
"Plugin 'yuratomo/w3m.vim'
call vundle#end()
"
""" helpful vundle hints (to be run inside vim)
":PluginList - list plugins
":PluginInstall - install plugins
":PluginInstall! - update plugins
":PluginSearch foo - search for plugin foo
":PluginClean - remove unused plugins
"
"" turn filetype recognition back on
filetype plugin indent on

" save and load folds automatically
"autocmd BufWinLeave *.* mkview!
"autocmd BufWinEnter *.* silent loadview

"" 'control+n' to reset highlighting (e.g. after a search or search/replace)
"nnoremap <C-n> :nohl<CR>

"" 'space + <char>' to insert character <char>
nnoremap <Space> i_<Esc>r

"" show trailing spaces as '_', tabs as '>   '
"set list listchars=tab:>\ ,eol:Â¬,extends:Â,precedes:Â«
"set list listchars=tab:\ \ ,trail:_,extends:Â»,precedes:Â«
"map <leader>lc :set list!<cr>

" status bar
set laststatus=2
let g:airline_theme='jellybeans'

" tslime
"" settings
let g:tslime_always_current_session = 1
"let g:tslime_always_current_window  = 1
"" keybindings
vmap <leader>ty <Plug>SendSelectionToTmux
nmap <leader>ty <Plug>NormalModeSendToTmux
nmap <leader>tr <Plug>SetTmuxVars

" nerdcommenter
"" space after comment
let g:NERDSpaceDelims = 1
"" allow comments on otherwise-empty lines
let g:NERDCommentEmptyLines = 1
"" flush comment delimeter with start of line
let g:NERDDefaultAlign = 'left'
"" inline comments for haskell by default
let g:NERDAltDelims_haskell = 1
"" commenting from cursor to EOL
map <silent> <leader>cL <plug>NERDCommenterToEOL


" necoghc
let g:necoghc_enable_detailed_browse = 1


" ycm options

"" set default path for ycm conf
"let g:ycm_extra_conf_globlist = ['$HOME/documents/programming/*','!~/*']
"" stop ycm from confirming ycm conf file
"let g:ycm_confirm_extra_conf = 0
"" disable ycm highlighing errors
"let g:ycm_enable_diagnostic_highlighting = 0


" Markdown
" ========

" Syntax highlighting
" -------------------
let g:markdown_fenced_languages = ['c', 'sh', 'bash=sh', 'python', 'ruby',
    \ 'haskell', 'hs=haskell', 'javascript', 'tex', 'ada', 'java', 'jack=java',
    \ 'vim', 'asm', 'ld', 'verilog']
syn match markdownIgnore "_"
syn match markdownIgnore "\*"

" Defined actions
" ---------------
map <leader>w :wa<cr>:!md make doc %<cr><cr>
map <leader>e :wa<cr>:!md make exec %<cr><cr>
map <leader>o :!md view %<cr><cr>
map <leader>p :!md publish %<cr><cr>

" dumb vim+markdown
" -----------------
autocmd FileType *.md |
    \hi def link markdownItalic              none |
    \hi def link markdownItalicDelimiter     none |
    \hi def link markdownBold                none |
    \hi def link markdownBoldDelimiter       none |
    \hi def link markdownBoldItalic          none |
    \hi def link markdownBoldItalicDelimiter none |
    \set spell


" set foldmethod to 'indent' for python files
autocmd BufRead,BufNewFile,BufEnter *.py,*.tcap  set foldmethod=indent

"autocmd BufRead,BufNewFile *.c,*.cc,*.cpp,*.h let @b=':!make'

"autocmd BufRead,BufNewFile *.tex,*.md let @b=':wa:!build_pdf %'
"  \ | let @p=':wa:!ssh_print mh247-19 %:r.pdf'
"  \ | let @o=':!mupdf %:r.pdf &> /dev/null &'

"autocmd BufRead,BufNewFile *.ino let @b=':!ano build -m fio'
"  \ | let @u=':!ano build -m fio:!ano upload -m fio'

" autocmd BufRead,BufNewFile *.tex let @w=':w:!pdflatex %:r; bibtex %:r; pdflatex %:r; pdflatex %:r'
"    \ | let @o=':!mupdf %:r.pdf &> /dev/null &'
""    \ | let @p=':wa:!ssh_print m_mh247 %:r.pdf'

"autocmd BufEnter * colorscheme custom
"autocmd BufEnter *.md colorscheme custom_md

augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: iso-8859-15 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
  autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END
