# git aliases
# ===========

# NOTE: careful with `git clean`, which removes untracked files (i.e. don't use
# in 'master' unless certain!)

# update branch
# -------------
# usage: `update_branch <dest_branch> (<src_branch>)`
# updates existing files in dest_branch with those in src_branch, creates no
# new files/diretories in dest_branch
update_branch() {
    merge_branch $@
    git clean -fd
    git checkout "$src_branch"
    git commit -am "updating branch '$dest_branch' with branch '$src_branch'"
}
### merge_branch
# same as update_branch, but doesn't remove untracked files/directories (to
# easily share new files between branches)
merge_branch() {
    if branch_exists "$1"; then dest_branch="$1"; else return 1; fi
    src_branch=${2:-'master'}
    branch_exists "$src_branch" || return 1
    git checkout "$dest_branch"
    git checkout "$src_branch" -- .
    git reset .
}

update_user() {
    user_branch=${1:-"$USER"}
    [[ -z "$user_branch" ]] && return 1
    git checkout 'master'
    git pull
    git checkout "$user_branch"
    git merge 'master'
    git checkout "$user_branch"
    git commit -am "updating user branch $user_branch"
    #tmp_branch='user_tmp'
    #git checkout 'master'
    #git checkout -b "$tmp_branch"
    #merge_branch "$tmp_branch" 'master'
}

# helpers
# =======

# check branch exists
# -------------------
branch_exists() {
    [[ -z "$1" ]] && return 1
    if [[ -z `git branch --list "$1"` ]]; then
        echo "branch '$1' does not exist"
        return 1
    fi
    return 0
}
