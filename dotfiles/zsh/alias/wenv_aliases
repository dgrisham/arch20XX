#!/usr/bin/zsh

wenv_setup() {
    unset WENV_DIR
    unset WENV_ALIASES
    WENV_PROJECT='wenv'

    wenv_init() { }
}

wenv() {
    wenv_command="$1"
    shift
    case "$wenv_command" in
        s|start)
            wenv_start $@
            ;;
        st|stop)
            wenv_stop $@
            ;;
        r|reset)
            wenv_reset $@
            ;;
        t|task|tasks) # TODO: "tasks?"
            wenv_tasks $@
            ;;
        c|'cd')
            wenv_cd $@
            ;;
        n|new)
            wenv_new $@
            ;;
        e|edit)
            wenv_edit $@
            ;;
        rm|remove)
            wenv_remove $@
            ;;
        sa|source_aliases)
            wenv_source_aliases $@
            ;;
        exec)
            wenv_exec $@
            ;;
        mv|rename)
            wenv_rename $@
            ;;
        *)
            echo "Unrecognized command: '$wenv_command'"
            ;;
    esac
}

wenv_start() {
    if [[ $# == 0 ]]; then
        print_aliases
        return 1
    fi

    wenv_stop
    wenv_exec $@

    if [[ -n "$TMUX" ]]; then
        tmux set-environment WENV "$WENV"
        tmux rename-window "$WENV"
    fi

    wenv_init
    unset -f wenv_init
}

wenv_exec() {
    flag_c=1
    flag_n=1
    while getopts ":cn" opt; do
        case $opt in
            c) flag_c=0 ;;
            n) flag_n=0 ;;
        esac
    done
    shift $((OPTIND - 1))

    [[ -z "$1" ]] && return 1
    export WENV="$1"

    wenv_load "$WENV"
    wenv_source_aliases
    [[ -n "$WENV_TASK" ]] && task start "$WENV_TASK" >/dev/null 2>&1

    if [[ $flag_c -eq 1 ]]; then
        cd "$WENV_DIR" &> /dev/null
        [[ ! -z "$WENV_BRANCH" ]] && git checkout "$WENV_BRANCH" &> /dev/null
    fi
    [[ $flag_n -eq 1 ]] && wenv_tasks_show

    export PS1="($WENV) $ORIGINAL_PS1"
}

wenv_stop() {
    [[ -z "$WENV" ]] && return 1

    wenv_cd
    [[ -n "$WENV_TASK" ]] && task "$WENV_TASK" stop

    if [[ -n "$WENV_BRANCH" ]]; then
        git commit -am "$WENV_BRANCH: rebase me"
        if [[ `git log -2 | grep "$WENV_BRANCH: rebase me" | wc -l` == '2' ]]; then
            git reset --soft HEAD~2
            git commit -am "$WENV_BRANCH: rebase me"
        fi
        git checkout master
    fi

    wenv_shutdown &> /dev/null # TODO: decide when is best to run this
    unset -f wenv_shutdown

    unset WENV
    unset WENV_{DIR,ALIASES,PROJECT,BRANCH}

    if [[ -n "$TMUX" ]]; then
        tmux set-environment WENV ''
        tmux rename-window ''
    fi
    export PS1="$ORIGINAL_PS1"
}

wenv_cd() {
    if [[ -z "$1" ]]; then
        cd "$WENV_DIR" &> /dev/null
        return 1
    fi
    wenv="$1"

    wenv_load "$wenv"
    cd "$WENV_DIR"

    wenv_load "$WENV"
    unset wenv_init
}

wenv_load() {
    [[ -z "$1" ]] && return 1
    wenv="$1"
    source_alias "$wenv" > /dev/null
    wenv_setup
}

wenv_new() {
    flag_d=0
    src="$SRC/arch20xx/src/wenv_template"
    while getopts ":di:" opt; do
        case $opt in
            d) flag_d=1 ;;
            i) [[ ! -z "$OPTARG" ]] && src="$ALIASES/${OPTARG}_aliases" ;;
            --) break ;;
            *) echo "invalid flag: $1" ; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    wenv="$1"

    # generalize/clean this up
    if [[ $flag_d -eq 1 ]]; then
        cat =(sed -r "s@WENV_DIR=.*?@WENV_DIR=\"`pwd`\"@" "$src") > "$ALIASES/${wenv}_aliases"
    else
        # this case shouldn't be exclusive from previous
        cp "$src" "$ALIASES/${wenv}_aliases"
    fi
    edit_alias "$wenv"
}

wenv_edit() {
    wenv="$1"
    [[ -z "$wenv" ]] && wenv="$WENV"
    if [[ -z "$wenv" ]]; then
        print_aliases
        return 1
    fi
    edit_alias "$wenv"
}

wenv_remove() {
    if [[ -z "$1" ]]; then
        print_aliases
        return 1
    fi
    wenv="$1"
    wenv_file="$ALIASES/${wenv}_aliases"
    if [[ ! -f "$wenv_file" ]]; then
        echo "WENV $wenv does not exist."
        return 1
    fi
    read "choice?Delete WENV $wenv? "
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        rm -f "$wenv_file"
    fi
}

wenv_reset() {
    [[ -n "TMUX" ]] && tmux set-environment WENV "$WENV"
}

wenv_tasks() {
    arg="$1"
    shift 2> /dev/null
    case "$arg" in
        s|show)
            wenv_tasks_show $@
            ;;
        a|add)
            wenv_tasks_add $@
            ;;
        *)
            wenv_tasks_show "$arg" $@
            ;;
    esac
}

wenv_tasks_show() {
    report="$1"
    [[ -z "$report" ]] && report="project"

    echo "$WENV_PROJECT"
    task "$report" project:"$WENV_PROJECT"
}

wenv_tasks_add() {
    [[ -z "$@" ]] && return 1
    # last passed argument is description (usually quoted string)
    desc="${@[$#]}"
    # all other args are passed to task warrior (yeah, this is ugly)
    task_args=${@:1:$(($# - 1))}
    task add project:"$WENV_PROJECT" tags:"$WENV" "$task_args" -- "$desc"
}

wenv_source_aliases() {  
    for wenv_alias in $WENV_ALIASES; do
        source_alias "$wenv_alias" > /dev/null
    done
}

wenv_rename() {
    [[ $# != 2 ]] && return 1
    old="$1_aliases"
    new="$2_aliases"

    mv "$ALIASES/$old" "$ALIASES/$new"
}

wenv_tmux_layout() {
    layout="$1"
    shift
    dev_cmd="$@"
    echo "dev_cmd $dev_cmd"
    case "$layout" in
        dev)
            wenv_tmux_split v
            tmux resize-pane -y 7
            [[ -n "$dev_cmd" ]] && tmux send-keys "$dev_cmd" 'Enter'
            tmux select-pane -U
            ;;
        devloop)
            wenv_tmux_layout 'dev' "devloop $dev_cmd"
            ;;
        *)
            return 1
            ;;
    esac
}

wenv_tmux_split() {
    cmd='ZSH_INIT="unset WENV; wenv exec -cn \"$WENV\"" zsh -i'
    case "$1" in
        h)
            tmux split-window -h -c "#{pane_current_path}" "$cmd"
            ;;
        v)
            tmux split-window -c "#{pane_current_path}" "$cmd"
            ;;
        *)
            return 1
            ;;
    esac
}
