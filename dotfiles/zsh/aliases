# Shortcuts
# =========

becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# convenient cd
# -------------
c() {                       # cd with bookmarks
    dirname="$1"
    case "$dirname" in      # bookmarks
        ipfs)     dirname="$GOPATH/src/github.com/ipfs/go-ipfs/exchange/bitswap" ;;
        cluster)  dirname="$GOPATH/src/github.com/ipfs/kubernetes-ipfs/ipfs-cluster" ;;
        web)      dirname="$SCRATCH/flasky"       ;;
        dev)      dirname="$SRC/arch20xx"         ;;
        res)      dirname="$HOME/work/research"   ;;
        498|game) dirname="$HOME/work/csci_498B"  ;;
        564|arch) dirname="$HOME/work/csci_564"   ;;
        240)      dirname="$HOME/work/stanford-cs240h/"   ;;
        ta)       dirname="$HOME/work/ta"      ;;
        med)      dirname="$PERSONAL/schedule/routine/morning/meditation/headspace/creativity_series/1" ;;
        pygame)   dirname="$SCRATCH/pygame/doodle_jump" ;;
        dec)      dirname="$SRC/decoy-routing"    ;;
        "")       dirname="$HOME"                 ;;
        *)      return 1                        ;;
    esac
    cd "$dirname"
    unset dirname           # for dir displayed in prompt
}

# open pdf, refresh tmux on close
# -------------------------------
pdf() {
    # note: update to check for jfbview
    # $VIEWER "$1"
    jfbview "$1"
    tmux refresh-client
}
# open pdf as plaintext
# ---------------------
tdf() {
    lesspipe.sh "$1" | less
}

# markdown publishing
md() {
    format="$1"
    md_doc="$2"

    case "$format" in
        markdown)   ext='md'                    ;;
        latex)      ext='pdf'                   ;;
        latex-raw)  ext='tex'; format='latex'   ;;
        beamer)     ext='pdf'                   ;;
        beamer-raw) ext='tex'; format='beamer'  ;;
        *)          ext="$format"               ;;
    esac

    pandoc --standalone --filter=pandoc-citeproc \
           --from=markdown --to="$format" \
           --output="${md_doc%.*}.$ext" "$md_doc" \
        || echo "pandoc error ..."
}

# latex building
# --------------
tex() {
    [[ -z "$1" ]] && return 1
    file="$1"
    prefix=${file%.*}

    pdflatex --shell-escape "$prefix".tex &&
    bibtex                  "$prefix"     &&
    pdflatex --shell-escape "$prefix".tex &&
    pdflatex --shell-escape "$prefix".tex

    rm -f $prefix.{out,snm,aux,toc,nav,lo?}
}

# cmus with lyrics and cover art
# ------------------------------
alias cf='cmus_full && exit'

# start existing vim session
# --------------------------
alias vs="vim -S"

# `vim <today's_date>.md`
# -----------------------
kt() {
    format='%Y-%m-%d'
    kak "`date +$format`.md"
}

# 'journal today'
# ---------------
jt() {
    format='%Y-%m-%d'
    journal_dir="$PERSONAL/routine/morning/journal/five_minute_journal"
    cp -n "$journal_dir/template.md" "$journal_dir/`date +$format`.md"
    cd "$journal_dir"
    kt
}

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# edit alias file
# ---------------
edit_alias() {
    if [[ $# -eq 0 ]]; then
        print_aliases
        return 1
    fi
    input_arg="$1"

    case "$input_arg" in
        g|global)
            alias_file="$GLOBAL_ALIAS"
            ;;
        l|local)
            alias_file="$LOCAL_ALIAS"
            ;;
        *)
            alias_file="$ALIASES/${input_arg}_aliases"
            ;;
    esac

    "$EDITOR" "$alias_file"
}
alias ea='edit_alias'

# remove alias file
# -----------------
remove_alias() {
    if [[ $# -eq 0 ]]; then
        print_aliases
        return 1
    fi

    input_arg="$1"
    case "$input_arg" in
        '-f')
            force=true
            shift
            ;;
        *)
            force=false
            ;;
    esac

    alias_file="$ALIASES/${1}_aliases"

    [[ -f "$alias_file" ]] || return 1

    # confirm with user if 'force' flag not provided
    if [[ "$force" = false ]]; then
        echo -n "Remove $alias_file (y/n)? "
        read choice
       
        if ! echo "$choice" | grep -iq "^y"; then
            return 1
        fi
    fi

    rm -f "$alias_file"
}
alias ra='remove_alias'

# source alias file
# -----------------
source_alias() {
    # if no input, print list of possible inputs and return
    if [[ $# -eq 0 ]]; then
        print_aliases
        return 1
    fi
    # check input(s), source associated alias file(s) accordingly
    input_arg="$1"
    shift
    case "$input_arg" in
        g|global)
            alias_file="$GLOBAL_ALIAS"
            ;;
        l|local)
            alias_file="$LOCAL_ALIAS"
            ;;
        *)
            alias_file="$ALIASES/${input_arg}_aliases"
            ;;
    esac
    if [[ -f "$alias_file" ]]; then
        echo "sourcing $alias_file"
        source "$alias_file"
    fi
    [[ $# -gt 0 ]] && source_alias $@
}
alias sa='source_alias'

### print alias file options (helper for {source,edit}_alias)
print_aliases() {
        echo "options:"
        echo "  - global (g)"
        echo "  - local (l)"
        ls -lh "$ALIASES" | tail -n +2 | awk '{ print $9 }' | sed -e "s/\([^_ ]\+\)_aliases/  - \1/"
}

# general git (more in git_aliases)
# ---------------------------------
alias gc='git commit -m'
alias gca='git commit -am'
alias gs='git status'
alias gl="git log --pretty=format:'%C(auto)%h %ad %C(green)%s%Creset %C(auto)%d [%an]' --graph --date=format:'%Y-%m-%d %H:%M' --all"

alias gco='git checkout'

# start working environment
# -------------------------
start_environment() {
    env="$1"
    [[ -z "$env" ]] && return 1

    source_alias "$env" > /dev/null
    c "$env" &> /dev/null
    case "$env" in
        cluster)
            source_alias 'ipfs' > /dev/null
            ;;
        web)
            source_alias 'python' > /dev/null
            flasky_aliases
            start_venv 'flask'
            ;;
        ta)
            start_venv 'ta'
            unset BROWSER
            ;;
    esac

    # show active env(s) in prompt
    if [[ -z "$ENV" ]]; then
        export ENV="$env"
        export PS1="($ENV) $PS1"
    else
    regex="(^|,| )${env}($|,| )"
    if [[ ! $ENV =~ $regex ]]; then
        export ENV="$ENV, $env"
        export PS1=$(echo "$PS1" | sed -re 's/^\(.*?\) //')
        export PS1="($ENV) $PS1"
    fi
    fi
}
alias se='start_environment'

# Scheduling
# ==========

# schedule/events
# ---------------
todo() {
    stuff="$PERSONAL/schedule/daily"
    format='%Y-%m-%d'
    cat "$stuff/`date +$format`.md"
}
schedule() { sed -n '/schedule/,$p' $PERSONAL/todo.md && echo && echo }
events() { sed -n '/events/,/tasks/p' $PERSONAL/todo.md | head -n-1 }
short_term() { sed -n '/short term/,/general/p' $PERSONAL/todo.md | head -n-1 }
alias st='short_term'
assignments() {
    sed -n '/assignments/,/schedule/p' $PERSONAL/todo.md | head -n-1
}
alias ass='assignments'
alias assless='assignments | less'

# schedule today
# --------------
today() {
    day_offset="$1"
    [[ -z "$day_offset" ]] && day_offset='0'
    schedule_file="$PERSONAL/todo.md"
    day="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    sed -n '/^'"$day"'$/,/^\w/p' $schedule_file | head -n -1
    dated="$(date --date="$day_offset days" +'%b %-d' | awk '{print tolower($0)}')"
    sed -n '/^'"$dated"'$/,/^\w/p' $schedule_file | head -n -1
}

# schedule for week
# -----------------
week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    let day="$week_offset*7"
    for i in {0..6}; do
        let day="$day+$i"
        today $day
    done
}

# due today
# ---------
due_today() {
    day_offset="$1"
    [[ -z "$day_offset" ]] && day_offset='0'
    format='%m-%d'
    due_date="$(date --date="$day_offset days" +$format)"
    schedule_file="$HOME/todo.md"
    echo "$input" | grep "$due_date" | grep -v "DONE"
}

# due within the week
# -------------------
due_week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    format='%m-%d'
    schedule_file="$HOME/todo.md"
    typeset -A classes
    assignments=`sed -n '/assignments/,/schedule/p' $PERSONAL/todo.md`
    class_nums=(561 572 598 'kgd')
    classes[561]=`echo "$assignments" | sed -n '/csci 561/,/csci 572/p' | head -n-1`
    classes[572]=`echo "$assignments" | sed -n '/csci 572/,/csci 598/p' | head -n-1`
    classes[598]=`echo "$assignments" | sed -n '/csci 598/,/kgd/p'   | head -n-1`
    classes[kgd]=`echo "$assignments" | sed -n '/kgd/,/schedule/p' | head -n-1`
    for k in $class_nums; do
        echo "\ncsci $k"
        echo "--------"
        let day="$week_offset*7"
        for i in {0..7}; do
            due_date="$(date --date="$day days" +$format)"
            let day="$day+1"
            echo "$classes[$k]" | grep --color=never "$due_date" | grep -v "DONE"
        done
    done
}

# default due function
# --------------------
alias due='due_week'


# current event
# -------------
tasks() {
    #event_offset=$1+1
    #[[ -z "$event_offset" ]] && event_offset=1
    schedule_file="$HOME/todo.md"
    curr_event="$(today 0 | grep '^-   ')"
    [[ -z "$curr_event" ]] && return 1
    curr_event=$(echo "$curr_event" | sed 's/.*\?-\([0-9:]\+\)/\1/')
    curr_time="$(date +'%H:%M') {NOW}"
    curr_event="$(echo "$curr_event\n$curr_time" | sort | grep -A1 "{NOW}" | tail -n1)"
    curr_event="$(echo "$curr_event" | sed 's/.*\?\s\{4\}\(.*\)/\1/' | awk '{print tolower($0)}')"
    sed -n '/^'"$curr_event"'$/,/^\w/p' $schedule_file | head -n -1
}

# next event
# ----------
next() {
    next_event="$(today 0 | grep '^-   ' | cut --characters=5-)"
    [[ -z "$next_event" ]] && return 1
    curr_time="$(date +'%H:%M') {NOW}"
    next_event="$(echo "$next_event\n$curr_time" | sort)"
    echo "$next_event" | grep -A1 "{NOW}" | tail -n1
}


# Source additional aliases
# =========================
[[ -n "$DISPLAY" ]] && source_alias 'x' > /dev/null
source_alias 'python' > /dev/null
source_alias 'cluster' > /dev/null
