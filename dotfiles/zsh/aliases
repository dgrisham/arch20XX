# Shortcuts
# =========

# convenient cd
# -------------
c() {                       # cd with bookmarks
    dirname="$1"
    case "$dirname" in      # bookmarks
        web)    dirname="$SCRATCH/web/flasky"   ;;
        dev)    dirname="$SRC/arch20xx"         ;;
        "")     dirname="$HOME"                 ;;
        *)      return 1                        ;;
    esac
    cd "$dirname"
    unset dirname           # for dir displayed in prompt
}

# open pdf, refresh tmux on close
# -------------------------------
pdf() {
    # note: update to check for jfbview
    $VIEWER "$1"
    tmux refresh-client
}

# `vim <today's_date>.md`
# -----------------------
vt() {
    format='%Y-%m-%d'
    vim "`date +$format`.md"
}

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# editing alias files
# -------------------
edit_alias() {
    if [[ $# -eq 0 ]]; then
        print_aliases
        return 1
    fi
    input_arg="$1"
    [[ -z "$input_arg" ]] && return 1
    case "$input_arg" in
        g|global)
            alias_file="$GLOBAL_ALIAS"
            ;;
        l|local)
            alias_file="$LOCAL_ALIAS"
            ;;
        *)
            alias_file="$ALIASES/${input_arg}_aliases"
            ;;
    esac
    [[ -f "$alias_file" ]] && "$EDITOR" "$alias_file"
}
alias ea='edit_alias'

# sourcing alias files
# --------------------
source_alias() {
    # if no input, print list of possible inputs and return
    if [[ $# -eq 0 ]]; then
        print_aliases
        return 1
    fi
    # check input(s), source associated alias file(s) accordingly
    input_arg="$1"
    shift
    case "$input_arg" in
        g|global)
            alias_file="$GLOBAL_ALIAS"
            ;;
        l|local)
            alias_file="$LOCAL_ALIAS"
            ;;
        *)
            alias_file="$ALIASES/${input_arg}_aliases"
            ;;
    esac
    if [[ -f "$alias_file" ]]; then
        echo "sourcing $alias_file"
        source "$alias_file"
    fi
    [[ $# -gt 0 ]] && source_alias $@
}
alias sa='source_alias'

### print alias file options (helper for {source,edit}_alias)
print_aliases() {
        echo "options:"
        echo "  - global (g)"
        echo "  - local (l)"
        ls -lh "$ALIASES" | tail -n +2 | awk '{ print $9 }' | sed -e "s/\([^_ ]\+\)_aliases/  - \1/"
}

# general git (more in git_aliases)
# ---------------------------------
alias gc='git commit -m'
alias gca='git commit -am'
alias gs='git status'
alias gco='git checkout'
alias gs='git status'

# start working environment
# -------------------------
start_environment() {
    env="$1"
    [[ -z "$env" ]] && return 1
    source_alias "$env" > /dev/null
    c "$env" &> /dev/null
    case "$env" in
        web)
            source_alias "python" > /dev/null
            flasky_aliases
            start_venv "flask"
            ;;
        dev)
            source_alias "git" > /dev/null
            ;;
    esac
}
alias se='start_environment'


# Scheduling
# ==========

# schedule/events
# ---------------
schedule() { sed -n '/schedule/,$p' ~/todo.md && echo && echo }
events() { sed -n '/events/,/schedule/p' ~/todo.md | head -n-1 }

# schedule today
# --------------
today() {
    day_offset="$1"
    [[ -z "$day_offset" ]] && day_offset='0'
    schedule_file="$HOME/todo.md"
    day="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    sed -n '/^'"$day"'$/,/^\w/p' $schedule_file | head -n -1
    dated="$(date --date="$day_offset days" +'%b %-d' | awk '{print tolower($0)}')"
    sed -n '/^'"$dated"'$/,/^\w/p' $schedule_file | head -n -1
}

# schedule for week
# -----------------
week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    let day="$week_offset*7"
    for i in {0..6}; do
        let day="$day+$i"
        today $day
    done
}

# current event
# -------------
tasks() {
    #event_offset=$1+1
    #[[ -z "$event_offset" ]] && event_offset=1
    schedule_file="$HOME/todo.md"
    curr_event="$(today 0 | grep '^-   ')"
    [[ -z "$curr_event" ]] && return 1
    curr_event=$(echo "$curr_event" | sed 's/.*\?-\([0-9:]\+\)/\1/')
    curr_time="$(date +'%H:%M') {NOW}"
    curr_event="$(echo "$curr_event\n$curr_time" | sort | grep -A1 "{NOW}" | tail -n1)"
    curr_event="$(echo "$curr_event" | sed 's/.*\?\s\{4\}\(.*\)/\1/' | awk '{print tolower($0)}')"
    sed -n '/^'"$curr_event"'$/,/^\w/p' $schedule_file | head -n -1
}

# next event
# ----------
next() {
    next_event="$(today 0 | grep '^-   ' | cut --characters=5-)"
    [[ -z "$next_event" ]] && return 1
    curr_time="$(date +'%H:%M') {NOW}"
    next_event="$(echo "$next_event\n$curr_time" | sort)"
    echo "$next_event" | grep -A1 "{NOW}" | tail -n1
}


# Source additional aliases
# =========================
[[ -n "$DISPLAY" ]] && source_alias 'x' > /dev/null

