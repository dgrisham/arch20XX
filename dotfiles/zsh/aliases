# Shortcuts
# =========

# save/go (for directories)
# -------------------------
s() {
    dir_alias="$1"
    [[ -z "$dir_alias" ]] && dir_alias="default"
    echo "$dir_alias=$(pwd)" >> "$HOME/.local/share/zsh/saved_dirs"
}
g() {
    dir_alias="$1"
    [[ -z "$dir_alias" ]] && dir_alias="default"
    source "$HOME/.local/share/zsh/saved_dirs"
    eval next_dir="\$$dir_alias"
    [[ -z "$next_dir" ]] && return 1
    cd "$next_dir"
}

# open pdf, refresh tmux on close
# -------------------------------
pdf() {
    # note: update to check for jfbview
    $VIEWER "$1"
    tmux refresh-client
}

# `vim <today's_date>.md`
# -----------------------
vt() {
    format='%Y-%m-%d'
    vim "`date +$format`.md"
}

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    # TODO: consider other ways of doing this (not bad now though)
    for directory in $(find "$DOTFILES/etc/$dir" -type d); do
        sudo cp -r "$directory" "${file#$DOTFILES}"
    done
    # TODO
}

# sourcing alias files
# --------------------
source_alias() {
    # if no input, print list of possible inputs, return 1
    if [[ ! "$#" -gt "0" ]]; then
        echo "options:"
        echo "  - global"
        echo "  - local"
        ls -lh "$ALIAS_DIR" | tail -n +2 | awk '{ print $9 }' | sed -e "s/\([^_ ]\+\)_aliases/  - \1/"
        return 1
    fi
    # check input(s), source associated alias file(s) accordingly
    input_arg="$1"
    shift
    case "$input_arg" in
        g|global)
            if [[ -f "$GLOBAL_ALIAS" ]]; then
                echo "sourcing global aliases ($GLOBAL_ALIAS)"
                source "$GLOBAL_ALIAS"
            else
                echo "file '$GLOBAL_ALIAS' does not exist"
            fi
            ;;
        l|local)
            if [[ -f "$LOCAL_ALIAS" ]]; then
                echo "sourcing local aliases ($LOCAL_ALIAS)"
                source "$LOCAL_ALIAS"
            else
                echo "file '$LOCAL_ALIAS' does not exist"
            fi
            ;;
        *)
            alias_file="${input_arg}_aliases"
            if [[ -f "$ALIAS_DIR/$alias_file" ]]; then
                echo "sourcing $alias_file"
                source "$ALIAS_DIR/$alias_file"
            else
                print "$alias_file does not exist"
            fi
            ;;
    esac
    [[ "$#" -gt "0" ]] && source_alias $@
    return 0
}
alias sa="source_alias"


# Media
# =====

# hdmi
# ----
alias hdmi-on="xrandr --output HDMI2 --auto --left-of eDP1 && $HOME/.fehbg"
alias hdmi-off="xrandr --output HDMI2 --off && $HOME/.fehbg"


# Scheduling
# ==========

# schedule/events
# ---------------
schedule() { sed -n '/schedule/,$p' ~/todo.md && echo && echo }
events() { sed -n '/events/,/schedule/p' ~/todo.md | head -n-1 }

# schedule today
# --------------
today() {
    day_offset="$1"
    [[ -z "$day_offset" ]] && day_offset='0'
    schedule_file="$HOME/todo.md"
    day="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    sed -n '/^'"$day"'$/,/^\w/p' $schedule_file | head -n -1
    dated="$(date --date="$day_offset days" +'%b %-d' | awk '{print tolower($0)}')"
    sed -n '/^'"$dated"'$/,/^\w/p' $schedule_file | head -n -1
}

# schedule for week
# -----------------
week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    let day="$week_offset*7"
    for i in {0..6}; do
        let day="$day+$i"
        today $day
    done
}

# current event
# -------------
tasks() {
    #event_offset=$1+1
    #[[ -z "$event_offset" ]] && event_offset=1
    schedule_file="$HOME/todo.md"
    curr_event="$(today 0 | grep '^-   ')"
    [[ -z "$curr_event" ]] && return 1
    curr_event=$(echo "$curr_event" | sed 's/.*\?-\([0-9:]\+\)/\1/')
    curr_time="$(date +'%H:%M') {NOW}"
    curr_event="$(echo "$curr_event\n$curr_time" | sort | grep -A1 "{NOW}" | tail -n1)"
    curr_event="$(echo "$curr_event" | sed 's/.*\?\s\{4\}\(.*\)/\1/' | awk '{print tolower($0)}')"
    sed -n '/^'"$curr_event"'$/,/^\w/p' $schedule_file | head -n -1
}

# next event
# ----------
next() {
    next_event="$(today 0 | grep '^-   ' | cut --characters=5-)"
    [[ -z "$next_event" ]] && return 1
    curr_time="$(date +'%H:%M') {NOW}"
    next_event="$(echo "$next_event\n$curr_time" | sort)"
    echo "$next_event" | grep -A1 "{NOW}" | tail -n1
}

